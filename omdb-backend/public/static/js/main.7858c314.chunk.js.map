{"version":3,"sources":["components/Card/Card.js","components/List/List.js","components/Search/Search.js","utils/constants.js","pages/SearchPage/SearchPage.js","pages/DetailsPage/DetailsPage.js","App.js","serviceWorker.js","index.js"],"names":["Card","React","memo","props","movie","history","useHistory","className","style","width","margin","height","overflow","src","Poster","alt","Title","Year","Type","onClick","push","imdbID","List","elements","component","zIndex","marginTop","map","e","element","createElement","key","Search","value","type","onChange","target","onSubmit","baseUrl","axiosHeaders","headers","SearchPage","useState","searchTerm","setSearchTerm","searchResult","setSearchResult","uri","axios","get","then","res","data","Array","onSubmitSuccess","catch","err","console","error","DetailsPage","match","params","state","loaded","back","bind","this","setState","log","Genre","imdbRating","Component","App","path","to","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.7858c314.chunk.js","sourcesContent":["import React from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\n/**\r\n * useState(), useHistory() => Both are react hooks.\r\n * React hooks help to change state.\r\n * State change via hooks also informs React that\r\n * re-rendering is required.\r\n * React.memo is a special function. It prevents re-rendering\r\n * unless this component's input has changed.\r\n * Usually all child components re-rendered.\r\n * With React.memo() only if this component input has updated\r\n * then re-rendering will occur.\r\n */\r\nconst Card = React.memo(props => {\r\n  /**\r\n   * movie = {\r\n   *  Poster: String,\r\n   *  Title: String,\r\n   *  Year: String,\r\n   *  Type: String,\r\n   *  imdbID: String\r\n   * }\r\n   */\r\n  const movie = props.movie;\r\n  const history = useHistory();\r\n\r\n  const viewButtonClick = () => {\r\n    history.push(`/details/${movie.imdbID}`);\r\n  }\r\n  \r\n  return (\r\n    <div className=\"col-md-4\">\r\n      <div className=\"card\" style={{ width: '18rem', margin: 'auto' }}>\r\n        <div className=\"bd-placeholder-img card-img-top\" style={{ width: '18rem', height: '18rem', overflow: 'hidden' }}>\r\n          <img src={movie.Poster} style={{ width: '18rem' }} alt=\"Poster\" />\r\n        </div>\r\n        <div className=\"card-body\">\r\n          <h5 className=\"card-title\">{movie.Title}</h5>\r\n          <p className=\"card-text\"> Year : {movie.Year} , Type: {movie.Type} </p>\r\n          <button className=\"btn btn-primary\" onClick={viewButtonClick}>View</button>\r\n        </div>\r\n      </div>\r\n      <br />\r\n    </div>\r\n  )\r\n})\r\n\r\nexport default Card;","import React from 'react';\r\n\r\nexport default function List(props) {\r\n  const elements = props.elements || []; // Array of movies\r\n  const component = props.component; // Card component\r\n\r\n  const createReactElement = (element) => {\r\n    /**\r\n     * This is a specific use case where you have to use the compiled version directly\r\n     * Second argument is input for card component.\r\n     * A list in react has to have a unique input property of key.\r\n     */\r\n    return React.createElement(component, { movie: element, key: element.imdbID })\r\n  }\r\n\r\n  return (\r\n    <div className=\"row\" style={{zIndex:0, marginTop:100}}>\r\n      {elements.map(e => createReactElement(e))}\r\n    </div>\r\n  )\r\n}","import React from 'react';\r\nimport './Search.css';\r\n\r\nexport default function Search(props) {\r\n  const value = props.value;\r\n  const handleChange = (e) => props.onChange(e.target.value);\r\n  const handleSubmit = () => props.onSubmit(value);\r\n\r\n  return (\r\n    <div className=\"background\">\r\n      <h2 className=\"logo\">movie-search</h2>\r\n      <input className=\"search clear-margin-top\" type=\"text\" value={value} onChange={handleChange} />\r\n      <button className=\"btn btn-primary clear-margin-top\" onClick={handleSubmit}>Search</button>\r\n    </div>\r\n  )\r\n}","\r\nconst baseUrl = 'http://localhost:3001/';\r\nconst axiosHeaders = {\r\n\theaders: {\r\n\t  'Access-Control-Allow-Origin': '*',\r\n\t}\r\n};\r\nexport { baseUrl, axiosHeaders }","import React, { useState } from 'react';\r\nimport axios from 'axios';\r\n\r\nimport Card from '../../components/Card/Card';\r\nimport List from '../../components/List/List';\r\nimport Search from '../../components/Search/Search';\r\n\r\nimport { baseUrl, axiosHeaders } from '../../utils/constants';\r\n\r\nexport default function SearchPage() {\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n  const [searchResult, setSearchResult] = useState([]);\r\n\r\n  const onSubmitSuccess = (res) => {\r\n    // Data validation before setting searchResult\r\n    if (res && res.data && res.data.Search instanceof Array) {\r\n      setSearchResult(res.data.Search);\r\n    }\r\n  }\r\n\r\n  const onSubmit = (searchTerm) => {\r\n    const uri = `${baseUrl}omdb/search?title=${searchTerm}`;\r\n    axios.get(uri, axiosHeaders)\r\n      .then(res => onSubmitSuccess(res))\r\n      .catch(err => console.error(err));\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Search value={searchTerm} onChange={setSearchTerm} onSubmit={onSubmit} />\r\n      <br />\r\n      <List elements={searchResult} component={Card} />\r\n    </>\r\n  )\r\n}","import React, {Component} from 'react';\r\nimport \"./DetailsPage.css\";\r\nimport axios from 'axios';\r\nimport {baseUrl, axiosHeaders} from  \"../../utils/constants\";\r\n\r\nexport default class DetailsPage extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.imdbID = props.match.params.imdbID;\r\n        this.state = {\r\n            uri: `${baseUrl}omdb/imdb/${this.imdbID}`,\r\n            searchResult:{},\r\n            loaded:false,\r\n        }\r\n        this.back = this.back.bind(this);\r\n    }\r\n    // const [searchResult, setSearchResult] = useState([]);\r\n    componentDidMount (){\r\n        axios(this.state.uri, axiosHeaders)\r\n        .then(res => {\r\n            this.setState({searchResult:res.data, loaded:true});\r\n            console.log(res);\r\n        })\r\n        .catch(err => console.error(err));\r\n        console.log(\"Hello\")\r\n    };\r\n    /**\r\n     * Call server with imdbID\r\n     * URL Format : http://localhost:3001/omdb/imdb/tt0944947\r\n     * const imdbID = params.imdbID;\r\n     */\r\n    back() {\r\n        this.props.history.push('/');\r\n    }\r\n    render() {\r\n        const movie = this.state.searchResult;\r\n        const isLoaded = this.state.loaded;\r\n        let division;\r\n        if(isLoaded)\r\n            division = <div className=\"container\">\r\n                <button className=\"btn btn-primary\" onClick={this.back}>Back</button>\r\n                <div className=\"row\" style={{marginTop:20}}>\r\n                    <div className=\"col-sm-6\">\r\n                        <img src={movie.Poster} className=\"movie-image\" width=\"300cm\" alt=\"Poster\"/>\r\n                    </div>\r\n                    <div className=\"col-sm-6\"> \r\n                        <h2>{movie.Title}</h2>\r\n                        <h4>{movie.Year}</h4>\r\n                        <h4>{movie.Genre}</h4>\r\n                        <h4>{movie.imdbRating}</h4>\r\n                    </div>\r\n                </div>\r\n                </div>   \r\n        else\r\n            division = <></>\r\n        return (\r\n            division\r\n        )\r\n    }\r\n};","import React from 'react';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Redirect\r\n} from \"react-router-dom\";\r\nimport './App.css';\r\nimport SearchPage from './pages/SearchPage/SearchPage';\r\nimport DetailsPage from './pages/DetailsPage/DetailsPage';\r\n// import HomePage from './pages/HomePage/HomePage';\r\n\r\n/**\r\n * The Router maps a url to a component\r\n */\r\nfunction App() {\r\n  return (\r\n    <div className=\"container-fluid remove-padding\">\r\n      <Router>\r\n        <Switch>\r\n          <Route path=\"/search\" component={SearchPage} />\r\n          <Route path=\"/details/:imdbID\" component={DetailsPage} />\r\n          <Redirect to=\"/search\" />\r\n        </Switch>\r\n      </Router>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}